---
import { categories, qaItems } from '../../data/edDiscussionData.ts';
---

<section class="ed-discussion-container">
  <div class="ed-header">
    <h2 class="section-title">Ed Discussion Q&A</h2>
    <p class="ed-subtitle">Common questions and answers from the course discussion board</p>
  </div>
  
  <div class="category-nav">
    {categories.map((category) => (
      <button
        class={`category-btn ${category === categories[0] ? 'active' : ''}`}
        data-category={category}
      >
        {category}
      </button>
    ))}
  </div>
  
  <div class="qa-list">
    {qaItems.map((item) => (
      <div
        class="qa-card"
        data-category={item.category}
        data-question-id={item.id}
        style={item.category !== categories[0] ? 'display: none;' : ''}
      >
        <div class="question-header">
          <div class="question-text">{item.question}</div>
          <div class="expand-icon">+</div>
        </div>
        
        <div class="answer-container" data-answer-id={item.id}>
          <div class="answer-text">
            {item.answer.split('\n').map((paragraph) => (
              <p>{paragraph}</p>
            ))}
          </div>
          
          {item.hasCode && (
            <div class="code-block" data-code-id={item.id}>
              <pre><code>{item.codeSnippet}</code></pre>
            </div>
          )}
        </div>
      </div>
    ))}
  </div>
</section>

<script>
  // Import GSAP and ScrollTrigger dynamically
  async function initEdDiscussionAnimations() {
    try {
      const { default: soundEffects } = await import('../../utils/soundEffects.js');
      
      if (typeof window !== 'undefined' && window.gsap) {
        const { gsap, ScrollTrigger } = window;
        
        // Register ScrollTrigger plugin
        gsap.registerPlugin(ScrollTrigger);
        
        const section = document.querySelector('.ed-discussion-container');
        const header = document.querySelector('.ed-header');
        const categoryButtons = document.querySelectorAll('.category-btn');
        const questionCards = document.querySelectorAll('.qa-card');
        
        if (!section) return;
        
        let activeCategory = 'General FAQ';
        let expandedQuestions = new Set();
        
        // Create GSAP timeline for header animations
        const headerTl = gsap.timeline({
          scrollTrigger: {
            trigger: section,
            start: "top 80%",
            end: "bottom 20%",
            toggleActions: "play none none reverse"
          }
        });
        
        // Header animation
        headerTl.from(header, {
          opacity: 0,
          y: 50,
          duration: 1,
          ease: "back.out(1.7)"
        });
        
        // Animate category buttons
        categoryButtons.forEach((btn, index) => {
          gsap.from(btn, {
            opacity: 0,
            x: -50,
            duration: 0.5,
            delay: 0.2 + (index * 0.1),
            ease: "power3.out",
            scrollTrigger: {
              trigger: btn,
              start: "top 90%",
              toggleActions: "play none none reverse"
            }
          });
          
          // Add hover effects
          btn.addEventListener('mouseenter', () => {
            gsap.to(btn, {
              scale: 1.05,
              duration: 0.3,
              ease: "power1.out"
            });
          });
          
          btn.addEventListener('mouseleave', () => {
            gsap.to(btn, {
              scale: 1,
              duration: 0.3,
              ease: "power1.out"
            });
          });
          
          // Category switching
          btn.addEventListener('click', () => {
            const category = btn.dataset.category;
            if (category && category !== activeCategory) {
              switchCategory(category);
              // Play navigation sound
              soundEffects.playNavigation();
            }
          });
        });
        
        // Animate visible question cards
        function animateVisibleCards() {
          const visibleCards = document.querySelectorAll(`.qa-card[data-category="${activeCategory}"]`);
          visibleCards.forEach((card, index) => {
            gsap.from(card, {
              opacity: 0,
              y: 30,
              duration: 0.5,
              delay: 0.3 + (index * 0.1),
              ease: "power3.out",
              scrollTrigger: {
                trigger: card,
                start: "top 90%",
                toggleActions: "play none none reverse"
              }
            });
          });
        }
        
        // Initial animation for default category
        animateVisibleCards();
        
        // Function to switch categories
        function switchCategory(category) {
          // Update active category
          activeCategory = category;
          
          // Update button states
          categoryButtons.forEach(btn => {
            if (btn.dataset.category === category) {
              btn.classList.add('active');
            } else {
              btn.classList.remove('active');
            }
          });
          
          // Hide all cards first
          questionCards.forEach(card => {
            gsap.to(card, {
              opacity: 0,
              duration: 0.2,
              onComplete: () => {
                card.style.display = 'none';
              }
            });
          });
          
          // Show cards for active category
          setTimeout(() => {
            const cardsToShow = document.querySelectorAll(`.qa-card[data-category="${category}"]`);
            cardsToShow.forEach((card, index) => {
              card.style.display = 'block';
              gsap.fromTo(card, {
                opacity: 0,
                y: 20
              }, {
                opacity: 1,
                y: 0,
                duration: 0.5,
                delay: index * 0.1,
                ease: "power3.out"
              });
            });
          }, 200);
        }
        
        // Question toggle functionality
        questionCards.forEach(card => {
          const questionHeader = card.querySelector('.question-header');
          const answerContainer = card.querySelector('.answer-container');
          const expandIcon = card.querySelector('.expand-icon');
          const questionId = card.dataset.questionId;
          
          if (questionHeader && answerContainer && expandIcon && questionId) {
            questionHeader.addEventListener('click', () => {
              const isExpanded = card.classList.contains('expanded');
              
              if (isExpanded) {
                // Collapse
                expandedQuestions.delete(questionId);
                card.classList.remove('expanded');
                expandIcon.textContent = '+';
                
                // Play collapse sound
                soundEffects.playCollapse();
              } else {
                // Expand
                expandedQuestions.add(questionId);
                card.classList.add('expanded');
                expandIcon.textContent = 'âˆ’';
                
                // Play expand sound
                soundEffects.playExpand();
              }
            });
            
            // Add cursor pointer
            questionHeader.style.cursor = 'pointer';
          }
        });
        
      }
    } catch (error) {
      console.log('GSAP not available, skipping animations');
    }
  }
  
  // Initialize animations when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initEdDiscussionAnimations);
  } else {
    initEdDiscussionAnimations();
  }
</script>

<style lang="scss">
.ed-discussion-container {
  padding: 4rem 2rem;
  background: linear-gradient(45deg, #533483, #0f0c29);
  color: white;
  position: relative;
  overflow: hidden;
}

.ed-header {
  text-align: center;
  margin-bottom: 3rem;
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    width: 150px;
    height: 150px;
    background: radial-gradient(circle, rgba(225, 0, 255, 0.2) 0%, rgba(225, 0, 255, 0) 70%);
    border-radius: 50%;
    z-index: 0;
    animation: pulse 3s infinite;
  }
}

@keyframes pulse {
  0% {
    transform: translateX(-50%) scale(1);
    opacity: 0.5;
  }
  50% {
    transform: translateX(-50%) scale(1.2);
    opacity: 0.2;
  }
  100% {
    transform: translateX(-50%) scale(1);
    opacity: 0.5;
  }
}

.section-title {
  font-size: 3rem;
  background: linear-gradient(to right, #00f5a0, #00d9f5);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  text-shadow: 0 0 15px rgba(0, 245, 160, 0.5);
  position: relative;
  z-index: 1;
  margin-bottom: 1rem;
}

.ed-subtitle {
  font-size: 1.2rem;
  color: rgba(255, 255, 255, 0.8);
  max-width: 800px;
  margin: 0 auto;
}

.category-nav {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 1rem;
  margin-bottom: 3rem;
}

.category-btn {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: white;
  padding: 0.8rem 1.5rem;
  border-radius: 30px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transition: all 0.5s ease;
  }

  &:hover::before {
    left: 100%;
  }

  &.active {
    background: linear-gradient(45deg, rgba(0, 245, 160, 0.2), rgba(0, 217, 245, 0.2));
    border: 1px solid rgba(0, 245, 160, 0.5);
    box-shadow: 0 0 15px rgba(0, 245, 160, 0.3);
  }
}

.qa-list {
  max-width: 900px;
  margin: 0 auto;
}

.qa-card {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 15px;
  margin-bottom: 1.5rem;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.3s ease;
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
  transform-style: preserve-3d;
  perspective: 1000px;

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
    background: rgba(255, 255, 255, 0.08);
  }

  &.expanded {
    background: rgba(255, 255, 255, 0.1);

    .expand-icon {
      background: linear-gradient(45deg, #00f5a0, #00d9f5);
      color: #0a0a1a;
      transform: rotate(180deg);
    }
  }
}

.question-header {
  padding: 1.5rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
}

.question-text {
  font-size: 1.2rem;
  font-weight: 600;
  color: #ffffff;
  flex-grow: 1;
  padding-right: 2rem;
}

.expand-icon {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  transition: all 0.3s ease;
}

.answer-container {
  padding: 0 1.5rem;
  overflow: hidden;
  line-height: 1.6;
  height: 0;
  opacity: 0;
  transition: all 0.3s ease;
}

.qa-card.expanded .answer-container {
  height: auto;
  opacity: 1;
  padding: 0 1.5rem 1.5rem 1.5rem;
}

.answer-text {
  color: rgba(255, 255, 255, 0.9);
  margin-bottom: 1rem;

  p {
    margin-bottom: 1rem;
  }
}

.code-block {
  background: rgba(0, 0, 0, 0.3);
  border-radius: 8px;
  padding: 1rem;
  margin-top: 1rem;
  overflow-x: auto;
  border-left: 3px solid #00f5a0;

  pre {
    margin: 0;
  }

  code {
    color: #00f5a0;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
  }
}

@media (max-width: 768px) {
  .section-title {
    font-size: 2rem;
  }
  
  .ed-subtitle {
    font-size: 1rem;
  }
  
  .category-nav {
    flex-direction: column;
    align-items: center;
  }
  
  .category-btn {
    width: 100%;
    max-width: 300px;
    text-align: center;
  }
  
  .question-text {
    font-size: 1rem;
  }
}
</style>