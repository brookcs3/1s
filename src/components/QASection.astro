---
// QASection Astro component
const qaItems = [
  {
    id: 1,
    question: "Should '0123' return 123 or None?",
    answer: "Returns 123. Leading zeros are accepted as valid input.",
    compliance: "✔️ Our implementation and tests accept leading zeros and return the correct integer."
  },
  {
    id: 2,
    question: "Will Gradescope accept line lengths up to 127?",
    answer: "If your workflow uses flake8 --max-line-length=127, lines up to 127 are valid.",
    compliance: "✔️ Our workflow matches this setting."
  },
  {
    id: 3,
    question: "Should small ints be padded to two hex digits (e.g., 2 → '02')? Should zero be '00'?",
    answer: "Yes, always pad to two digits per byte.",
    compliance: "✔️ Our implementation pads all bytes to two characters."
  },
  {
    id: 4,
    question: "Are type annotations allowed?",
    answer: "Yes, type annotations are allowed.",
    compliance: "✔️ Type annotations are optional and do not affect compliance."
  },
  {
    id: 5,
    question: "Is 'endian' case sensitive?",
    answer: "Only 'big' and 'little' (lowercase) are valid.",
    compliance: "✔️ Our implementation only accepts lowercase 'big' and 'little'."
  },
  {
    id: 6,
    question: "Should conv_num('123.') return 123.0 or 123?",
    answer: "Must return 123.0 (float), not int.",
    compliance: "✔️ Our implementation and tests require float type for this case."
  },
  {
    id: 7,
    question: "Should negative numbers be represented as a negative sign followed by the same hex as positive?",
    answer: "Yes, just add a '-' sign; do not use two's complement.",
    compliance: "✔️ Our implementation matches this."
  },
  {
    id: 8,
    question: "Can we use multiple test classes?",
    answer: "Yes, you may use separate classes for each function.",
    compliance: "✔️ Our tests use three classes, one per function."
  }
];
---

<style lang="scss">
.qa-container {
  padding: 4rem 2rem;
  background: linear-gradient(45deg, #0f3460, #533483);
  color: white;
  position: relative;
  overflow: hidden;
}

.section-title {
  font-size: 3rem;
  text-align: center;
  margin-bottom: 2rem;
  background: linear-gradient(to right, #e100ff, #7f00ff);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  text-shadow: 0 0 15px rgba(225, 0, 255, 0.5);
  position: relative;
}

.section-title::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 100px;
  height: 4px;
  background: linear-gradient(to right, #e100ff, #7f00ff);
  border-radius: 2px;
}

.qa-intro {
  text-align: center;
  max-width: 800px;
  margin: 0 auto 3rem;
  font-size: 1.2rem;
  line-height: 1.6;
  color: rgba(255, 255, 255, 0.9);
}

.qa-list {
  max-width: 900px;
  margin: 0 auto;
}

.qa-item {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 15px;
  margin-bottom: 1.5rem;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.3s ease;
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
  position: relative;
}

.qa-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
  background: rgba(255, 255, 255, 0.1);
}

.qa-item.active {
  background: rgba(255, 255, 255, 0.15);
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
}

.qa-question {
  padding: 1.5rem;
  display: flex;
  align-items: center;
  position: relative;
}

.qa-number {
  background: linear-gradient(45deg, #e100ff, #7f00ff);
  color: white;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  margin-right: 1rem;
  flex-shrink: 0;
  box-shadow: 0 5px 15px rgba(225, 0, 255, 0.3);
}

.qa-question-text {
  flex-grow: 1;
  font-size: 1.2rem;
  font-weight: 600;
}

.qa-toggle {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  margin-left: 1rem;
  transition: all 0.3s ease;
}

.qa-item.active .qa-toggle {
  background: linear-gradient(45deg, #e100ff, #7f00ff);
  transform: rotate(180deg);
}

.qa-answer {
  padding: 0 1.5rem 1.5rem 4.5rem;
  overflow: hidden;
  line-height: 1.6;
  perspective: 1000px;
}

.page {
  margin-bottom: 1rem;
  transform-style: preserve-3d;
  background: rgba(255, 255, 255, 0.05);
  padding: 1rem;
  border-radius: 10px;
  border-left: 3px solid #e100ff;
}

.answer-text {
  color: rgba(255, 255, 255, 0.9);
}

.compliance-text {
  color: #00f5a0;
}

.floating-icons-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.floating-icon {
  position: absolute;
  font-size: 1.5rem;
  opacity: 0.5;
  z-index: 1;
}

@media (max-width: 768px) {
  .section-title {
    font-size: 2rem;
  }
  
  .qa-intro {
    font-size: 1rem;
  }
  
  .qa-question {
    padding: 1rem;
  }
  
  .qa-number {
    width: 30px;
    height: 30px;
    font-size: 0.9rem;
  }
  
  .qa-question-text {
    font-size: 1rem;
  }
  
  .qa-answer {
    padding: 0 1rem 1rem 3.5rem;
  }
}
</style>

<div id="qa-section" class="qa-container">
  <div class="floating-icons-container">
    {[...Array(15)].map((_, i) => (
      <div key={i} class="floating-icon">✔️</div>
    ))}
  </div>
  
  <h2 id="qa-title" class="section-title">Student Questions and Project Compliance Review</h2>
  
  <div class="qa-intro">
    This section reviews common student questions from the course discussion and rates how the Group 92 project aligns with the clarifications and answers provided by the instructor.
  </div>
  
  <div class="qa-list">
    {qaItems.map((item) => (
      <div 
        key={item.id} 
        data-qa-item
        data-id={item.id}
        class="qa-item"
      >
        <div class="qa-question">
          <div class="qa-number">{item.id}</div>
          <div class="qa-question-text">{item.question}</div>
          <div class="qa-toggle">+</div>
        </div>
        
        <div class="qa-answer" style="height: 0; opacity: 0;">
          <div class="page answer-text">
            <strong>A:</strong> {item.answer}
          </div>
          <div class="page compliance-text">
            <strong>Project Compliance:</strong> {item.compliance}
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<script>
  import gsap from 'gsap';
  
  document.addEventListener('DOMContentLoaded', async () => {
    if (typeof window !== 'undefined') {
      const { ScrollTrigger } = await import('gsap/ScrollTrigger');
      gsap.registerPlugin(ScrollTrigger);
      
      const sectionElement = document.getElementById('qa-section');
      const titleElement = document.getElementById('qa-title');
      const qaItemElements = document.querySelectorAll('[data-qa-item]');
      let activeQA = null;
      
      // Create GSAP timeline for QA section animations
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: sectionElement,
          start: "top 80%",
          end: "bottom 20%",
          toggleActions: "play none none reverse"
        }
      });
      
      // Title animation
      tl.from(titleElement, {
        opacity: 0,
        y: 50,
        duration: 0.8,
        ease: "back.out(1.7)"
      });
      
      // Floating icons animation
      const floatingIcons = document.querySelectorAll('.floating-icon');
      floatingIcons.forEach((icon, index) => {
        gsap.to(icon, {
          y: `random(-20, 20)`,
          x: `random(-20, 20)`,
          rotation: `random(-15, 15)`,
          duration: `random(2, 4)`,
          repeat: -1,
          yoyo: true,
          ease: "sine.inOut",
          delay: index * 0.2
        });
      });
      
      // QA items staggered animation
      qaItemElements.forEach((item, index) => {
        gsap.from(item, {
          opacity: 0,
          x: index % 2 === 0 ? -100 : 100,
          y: 50,
          duration: 0.8,
          delay: index * 0.1,
          ease: "power3.out",
          scrollTrigger: {
            trigger: item,
            start: "top 90%",
            toggleActions: "play none none reverse"
          }
        });
        
        // Question text scramble effect
        const questionText = item.querySelector('.qa-question-text');
        if (questionText) {
          const originalText = questionText.textContent || '';
          const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
          
          let currentText = '';
          let duration = 1.5;
          let startTime = 0;
          let progress = 0;
          
          const scrambleText = (timestamp) => {
            if (!startTime) startTime = timestamp;
            progress = (timestamp - startTime) / (duration * 1000);
            
            if (progress < 1) {
              currentText = '';
              for (let i = 0; i < originalText.length; i++) {
                if (i < originalText.length * progress) {
                  currentText += originalText[i];
                } else {
                  currentText += chars[Math.floor(Math.random() * chars.length)];
                }
              }
              questionText.textContent = currentText;
              requestAnimationFrame(scrambleText);
            } else {
              questionText.textContent = originalText;
            }
          };
          
          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                startTime = 0;
                requestAnimationFrame(scrambleText);
                observer.unobserve(entry.target);
              }
            });
          }, { threshold: 0.5 });
          
          observer.observe(item);
        }
      });
      
      // Toggle QA functionality
      const toggleQA = (id) => {
        const newActiveQA = activeQA === id ? null : id;
        
        // Animate answer reveal
        const qaItem = document.querySelector(`[data-id="${id}"]`);
        const answer = qaItem?.querySelector('.qa-answer');
        const toggle = qaItem?.querySelector('.qa-toggle');
        
        if (answer && toggle) {
          if (activeQA === id) {
            // Close animation
            gsap.to(answer, {
              height: 0,
              opacity: 0,
              duration: 0.5,
              ease: "power2.out"
            });
            toggle.textContent = '+';
            qaItem.classList.remove('active');
          } else {
            // Close previously active item
            if (activeQA !== null) {
              const prevItem = document.querySelector(`[data-id="${activeQA}"]`);
              const prevAnswer = prevItem?.querySelector('.qa-answer');
              const prevToggle = prevItem?.querySelector('.qa-toggle');
              if (prevAnswer && prevToggle) {
                gsap.to(prevAnswer, {
                  height: 0,
                  opacity: 0,
                  duration: 0.5,
                  ease: "power2.out"
                });
                prevToggle.textContent = '+';
                prevItem.classList.remove('active');
              }
            }
            
            // Open animation
            gsap.fromTo(answer, 
              { height: 0, opacity: 0 },
              { 
                height: 'auto', 
                opacity: 1, 
                duration: 0.5, 
                ease: "power2.out",
                onComplete: () => {
                  // Page turn effect
                  const pages = answer.querySelectorAll('.page');
                  pages.forEach((page, index) => {
                    gsap.fromTo(page,
                      { rotationY: -90, opacity: 0 },
                      { 
                        rotationY: 0, 
                        opacity: 1, 
                        duration: 0.5, 
                        delay: index * 0.2,
                        ease: "back.out(1.7)" 
                      }
                    );
                  });
                }
              }
            );
            toggle.textContent = '−';
            qaItem.classList.add('active');
          }
        }
        
        activeQA = newActiveQA;
      };
      
      // Add click event listeners
      qaItemElements.forEach((item) => {
        const id = parseInt(item.getAttribute('data-id'));
        item.addEventListener('click', () => toggleQA(id));
      });
    }
  });
</script>