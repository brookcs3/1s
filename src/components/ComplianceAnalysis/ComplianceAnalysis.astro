---
// No props needed for this component
---

<section class="compliance-analysis-container">
  <div class="compliance-header">
    <h2 class="section-title">Project Compliance Analysis</h2>
    <p class="compliance-subtitle">Analysis of code compliance with Ed Discussion requirements</p>
  </div>

  <div class="compliance-content">
    <div class="compliance-overview">
      <h3>Overview</h3>
      <p>
        This analysis evaluates the compliance of the project code against the requirements 
        and guidelines discussed in the Ed Discussion forum. The project has been reviewed 
        for adherence to function implementation requirements, built-in function restrictions, 
        testing approach, and code style guidelines.
      </p>
    </div>

    <div class="compliance-section">
      <h3>Built-ins & Functions Requirements</h3>
      <table class="compliance-table">
        <thead>
          <tr>
            <th>Requirement</th>
            <th>Status</th>
            <th>Evidence</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>No use of <code>int()</code> or <code>float()</code> in <code>conv_num</code></td>
            <td class="compliant">✅ Compliant</td>
            <td>The <code>conv_num</code> function and its helpers implement manual parsing without using built-in conversion functions</td>
          </tr>
          <tr>
            <td>No use of <code>datetime.datetime.fromtimestamp()</code> in <code>my_datetime</code></td>
            <td class="compliant">✅ Compliant</td>
            <td>The <code>my_datetime</code> function calculates dates manually without using datetime module</td>
          </tr>
          <tr>
            <td>No built-in byte/hex conversion in <code>conv_endian</code></td>
            <td class="compliant">✅ Compliant</td>
            <td>The <code>conv_endian</code> function implements manual hex conversion</td>
          </tr>
          <tr>
            <td>Allowed use of helper functions (<code>isdigit()</code>, <code>ord()</code>, bitwise operators)</td>
            <td class="compliant">✅ Compliant</td>
            <td>The code uses <code>ord()</code> for character conversion but implements core logic manually</td>
          </tr>
          <tr>
            <td>Handling commas in numbers (should return None)</td>
            <td class="compliant">✅ Compliant</td>
            <td>The <code>_conv_num_validate_input</code> function rejects non-digit characters</td>
          </tr>
          <tr>
            <td>Support for large/small numbers</td>
            <td class="compliant">✅ Compliant</td>
            <td>Tests show handling of very large integers and floats with high precision</td>
          </tr>
          <tr>
            <td>No regex parsing followed by built-in conversion</td>
            <td class="compliant">✅ Compliant</td>
            <td>No regex is used in the implementation</td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="compliance-section">
      <h3>Function Implementation Requirements</h3>
      <table class="compliance-table">
        <thead>
          <tr>
            <th>Requirement</th>
            <th>Status</th>
            <th>Evidence</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>conv_num</code>: Handle integers, floats, and hex</td>
            <td class="compliant">✅ Compliant</td>
            <td>Function handles all three formats with separate parsing logic</td>
          </tr>
          <tr>
            <td><code>conv_num</code>: Return correct types (int for integers, float for decimals)</td>
            <td class="compliant">✅ Compliant</td>
            <td>Return types match input format (int for integers, float for decimals)</td>
          </tr>
          <tr>
            <td><code>conv_num</code>: Return None for invalid formats</td>
            <td class="compliant">✅ Compliant</td>
            <td>Extensive validation checks return None for invalid inputs</td>
          </tr>
          <tr>
            <td><code>my_datetime</code>: Handle leap years correctly</td>
            <td class="compliant">✅ Compliant</td>
            <td><code>check_leap</code> function correctly implements leap year calculation</td>
          </tr>
          <tr>
            <td><code>my_datetime</code>: Support dates up to year 9999</td>
            <td class="compliant">✅ Compliant</td>
            <td>No artificial limits in the implementation</td>
          </tr>
          <tr>
            <td><code>conv_endian</code>: Support both 'big' and 'little' endian</td>
            <td class="compliant">✅ Compliant</td>
            <td>Function handles both endian types with parameter validation</td>
          </tr>
          <tr>
            <td><code>conv_endian</code>: Handle negative numbers with leading '-'</td>
            <td class="compliant">✅ Compliant</td>
            <td>Negative numbers are handled with leading '-' sign</td>
          </tr>
          <tr>
            <td><code>conv_endian</code>: Proper byte padding (e.g., 2 → '02')</td>
            <td class="compliant">✅ Compliant</td>
            <td>Padding is implemented in <code>helper_convert_to_hex_bytes</code></td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="compliance-section">
      <h3>Testing & Validation Requirements</h3>
      <table class="compliance-table">
        <thead>
          <tr>
            <th>Requirement</th>
            <th>Status</th>
            <th>Evidence</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Separate test classes for each function</td>
            <td class="compliant">✅ Compliant</td>
            <td>Tests are organized in <code>TestConvNum</code>, <code>TestMyDatetime</code>, and <code>TestConvEndian</code> classes</td>
          </tr>
          <tr>
            <td>Tests for both valid and invalid inputs</td>
            <td class="compliant">✅ Compliant</td>
            <td>Extensive test cases for valid formats and edge cases</td>
          </tr>
          <tr>
            <td>Tests for return types</td>
            <td class="compliant">✅ Compliant</td>
            <td>Type checking tests are included</td>
          </tr>
          <tr>
            <td>Tests for edge cases</td>
            <td class="compliant">✅ Compliant</td>
            <td>Comprehensive edge case testing (e.g., zero, large numbers, boundary conditions)</td>
          </tr>
          <tr>
            <td>Tests for <code>conv_endian</code> with various values</td>
            <td class="compliant">✅ Compliant</td>
            <td>Tests include various values, negative numbers, and padding</td>
          </tr>
          <tr>
            <td>Tests for handling of leading zeros</td>
            <td class="compliant">✅ Compliant</td>
            <td>Tests verify correct handling of leading zeros</td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="compliance-section">
      <h3>Code Style & Documentation Requirements</h3>
      <table class="compliance-table">
        <thead>
          <tr>
            <th>Requirement</th>
            <th>Status</th>
            <th>Evidence</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Line length (max 127 characters)</td>
            <td class="compliant">✅ Compliant</td>
            <td>No lines exceed the 127 character limit</td>
          </tr>
          <tr>
            <td>Clear, concise documentation</td>
            <td class="compliant">✅ Compliant</td>
            <td>Functions have clear docstrings with parameter and return descriptions</td>
          </tr>
          <tr>
            <td>Professional technical writing style</td>
            <td class="compliant">✅ Compliant</td>
            <td>Documentation uses formal, professional language</td>
          </tr>
          <tr>
            <td>Explanation of implementation choices</td>
            <td class="compliant">✅ Compliant</td>
            <td>Comments explain key implementation decisions</td>
          </tr>
          <tr>
            <td>Handling of edge cases documented</td>
            <td class="compliant">✅ Compliant</td>
            <td>Edge case handling is documented in code comments</td>
          </tr>
          <tr>
            <td>Code organization and readability</td>
            <td class="compliant">✅ Compliant</td>
            <td>Code is well-organized with clear section headers and consistent formatting</td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="compliance-conclusion">
      <h3>Conclusion</h3>
      <p>
        The project code is <span class="highlight">fully compliant</span> with all requirements and guidelines 
        discussed in the Ed Discussion forum. The implementation avoids prohibited built-in 
        functions, correctly handles all required formats and edge cases, and is thoroughly 
        tested. The code is well-documented and follows good style practices.
      </p>
      <div class="compliance-badge">
        <span class="badge-text">100% COMPLIANT</span>
      </div>
    </div>
  </div>
</section>

<script>
  // Import GSAP and ScrollTrigger dynamically
  async function initComplianceAnimations() {
    try {
      const { default: soundEffects } = await import('../../utils/soundEffects.js');
      
      if (typeof window !== 'undefined' && window.gsap) {
        const { gsap, ScrollTrigger } = window;
        
        // Register ScrollTrigger plugin
        gsap.registerPlugin(ScrollTrigger);
        
        const section = document.querySelector('.compliance-analysis-container');
        const title = document.querySelector('.compliance-analysis-container .section-title');
        const tables = document.querySelectorAll('.compliance-table');
        const conclusion = document.querySelector('.compliance-conclusion');
        
        if (!section) return;
        
        // Create GSAP timeline for section animations
        const tl = gsap.timeline({
          scrollTrigger: {
            trigger: section,
            start: "top 80%",
            end: "bottom 20%",
            toggleActions: "play none none reverse"
          }
        });
        
        // Title animation
        if (title) {
          tl.from(title, {
            y: 50,
            opacity: 0,
            duration: 0.8,
            ease: "back.out(1.7)"
          });
        }
        
        // Animate tables with stagger
        tables.forEach((table, index) => {
          gsap.from(table, {
            x: index % 2 === 0 ? -50 : 50,
            opacity: 0,
            duration: 0.8,
            delay: 0.2 + (index * 0.15),
            ease: "power3.out",
            scrollTrigger: {
              trigger: table,
              start: "top 85%",
              toggleActions: "play none none reverse",
              onEnter: () => {
                // Play gentle compliance sound when table animates in
                setTimeout(() => soundEffects.playCompliance(), index * 150);
              }
            }
          });
          
          // Animate table rows
          const rows = table.querySelectorAll('tr');
          gsap.from(rows, {
            opacity: 0,
            y: 20,
            duration: 0.4,
            stagger: 0.05,
            delay: 0.4 + (index * 0.15),
            ease: "power2.out",
            scrollTrigger: {
              trigger: table,
              start: "top 85%",
              toggleActions: "play none none reverse"
            }
          });
        });
        
        // Conclusion animation
        if (conclusion) {
          gsap.from(conclusion, {
            y: 30,
            opacity: 0,
            duration: 0.8,
            delay: 0.5,
            ease: "power2.out",
            scrollTrigger: {
              trigger: conclusion,
              start: "top 85%",
              toggleActions: "play none none reverse",
              onEnter: () => {
                // Play success sound when conclusion appears
                setTimeout(() => soundEffects.playSuccess(), 300);
              }
            }
          });
        }
        
      }
    } catch (error) {
      console.log('GSAP not available, skipping animations');
    }
  }
  
  // Initialize animations when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initComplianceAnimations);
  } else {
    initComplianceAnimations();
  }
</script>

<style lang="scss">
.compliance-analysis-container {
  padding: 4rem 2rem;
  background: linear-gradient(135deg, #1a0033, #3d0066);
  color: white;
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23ffffff' fill-opacity='0.03' fill-rule='evenodd'/%3E%3C/svg%3E");
    z-index: 0;
  }
}

.compliance-header {
  text-align: center;
  margin-bottom: 3rem;
  position: relative;
  z-index: 1;
}

.section-title {
  font-size: 3rem;
  background: linear-gradient(to right, #00f5a0, #00d9f5);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  text-shadow: 0 0 15px rgba(0, 245, 160, 0.5);
  margin-bottom: 1rem;
}

.compliance-subtitle {
  font-size: 1.2rem;
  color: rgba(255, 255, 255, 0.8);
  max-width: 800px;
  margin: 0 auto;
}

.compliance-content {
  max-width: 1200px;
  margin: 0 auto;
  position: relative;
  z-index: 1;
}

.compliance-overview {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 15px;
  padding: 2rem;
  margin-bottom: 3rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);

  h3 {
    font-size: 1.8rem;
    margin-bottom: 1rem;
    color: #00f5a0;
  }

  p {
    font-size: 1.1rem;
    line-height: 1.6;
  }
}

.compliance-section {
  margin-bottom: 3rem;

  h3 {
    font-size: 1.8rem;
    margin-bottom: 1.5rem;
    color: #00f5a0;
    position: relative;
    display: inline-block;

    &::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, #00f5a0, transparent);
      border-radius: 3px;
    }
  }
}

.compliance-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);

  th {
    background: rgba(0, 245, 160, 0.2);
    color: white;
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    border-bottom: 2px solid rgba(0, 245, 160, 0.5);
  }

  td {
    padding: 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(255, 255, 255, 0.05);
  }

  tr:last-child td {
    border-bottom: none;
  }

  tr:hover td {
    background: rgba(255, 255, 255, 0.1);
  }

  code {
    background: rgba(0, 0, 0, 0.3);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    color: #00f5a0;
  }
}

.compliant {
  color: #00f5a0;
  font-weight: bold;
}

.non-compliant {
  color: #ff4d4d;
  font-weight: bold;
}

.compliance-conclusion {
  background: rgba(0, 245, 160, 0.1);
  border-radius: 15px;
  padding: 2rem;
  margin-top: 3rem;
  border: 1px solid rgba(0, 245, 160, 0.3);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  text-align: center;

  h3 {
    font-size: 2rem;
    margin-bottom: 1.5rem;
    color: #00f5a0;
  }

  p {
    font-size: 1.2rem;
    line-height: 1.6;
    margin-bottom: 2rem;
  }
}

.highlight {
  color: #00f5a0;
  font-weight: bold;
  text-decoration: underline;
}

.compliance-badge {
  display: inline-block;
  background: linear-gradient(45deg, #00f5a0, #00d9f5);
  padding: 1rem 2rem;
  border-radius: 50px;
  box-shadow: 0 5px 15px rgba(0, 245, 160, 0.3);
  transform: rotate(-2deg);
  animation: pulse 2s infinite;
}

.badge-text {
  font-size: 1.5rem;
  font-weight: bold;
  color: #1a0033;
  letter-spacing: 1px;
}

@keyframes pulse {
  0% {
    transform: rotate(-2deg) scale(1);
    box-shadow: 0 5px 15px rgba(0, 245, 160, 0.3);
  }
  50% {
    transform: rotate(-2deg) scale(1.05);
    box-shadow: 0 10px 25px rgba(0, 245, 160, 0.5);
  }
  100% {
    transform: rotate(-2deg) scale(1);
    box-shadow: 0 5px 15px rgba(0, 245, 160, 0.3);
  }
}

@media (max-width: 768px) {
  .section-title {
    font-size: 2rem;
  }
  
  .compliance-subtitle {
    font-size: 1rem;
  }
  
  .compliance-table {
    display: block;
    overflow-x: auto;
  }
  
  .compliance-badge {
    padding: 0.8rem 1.5rem;
  }
  
  .badge-text {
    font-size: 1.2rem;
  }
}
</style>